{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport E from \"wangeditor\";\nimport hljs from \"highlight.js\";\nexport default {\n  name: \"NewBlog\",\n  data() {\n    return {\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        title: [{\n          required: true,\n          message: '标题不能为空',\n          trigger: 'blur'\n        }],\n        content: [{\n          required: true,\n          message: '内容不能为空',\n          trigger: 'blur'\n        }]\n      },\n      tagsArr: [],\n      categoryList: [],\n      editor: null,\n      blogId: this.$route.query.blogId\n    };\n  },\n  mounted() {\n    this.$request.get('/category/selectAll').then(res => {\n      this.categoryList = res.data || [];\n    });\n    this.$request.get('/blog/selectById/' + this.blogId).then(res => {\n      this.form = res.data || {};\n      if (this.form.id) {\n        this.tagsArr = JSON.parse(this.form.tags || '[]');\n        setTimeout(() => {\n          this.editor.txt.html(this.form.content);\n        }, 0);\n      }\n    });\n    this.setRichText();\n  },\n  methods: {\n    showConfirmDialog() {\n      this.$confirm('确认保存吗?', '提示', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 用户点击确认按钮的逻辑\n        this.save(); // 执行保存操作\n      }).catch(() => {\n        // 用户点击取消按钮的逻辑\n        // 可以选择关闭弹窗或执行其他操作\n      });\n    },\n    save() {\n      // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.form.content = this.editor.txt.html(); // 更新内容\n      if (!this.form.title) {\n        this.$message.error('标题不能为空');\n        return; // 返回，不执行保存操作\n      }\n\n      if (this.isContentEmpty(this.form.content)) {\n        this.$message.error('内容不能为空');\n        return; // 返回，不执行保存操作\n      }\n\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.form.tags = JSON.stringify(this.tagsArr); // 把json数组转换成json字符串存到数据库\n          this.form.content = this.editor.txt.html();\n          this.$request({\n            url: this.form.id ? '/blog/update' : '/blog/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              // 表示成功保存\n              // 关闭所有已存在的消息\n              this.$message.closeAll();\n              this.$message.success('保存成功');\n              this.$router.push('/front/person'); // 跳转到个人页面，这里假设使用了 Vue Router\n            } else {\n              // 表单验证失败，不执行保存操作，显示验证提示信息\n\n              this.$message.error(res.msg); // 弹出错误的信息\n            }\n          });\n        }\n      });\n    },\n\n    handleCoverSuccess(res) {\n      this.form.cover = res.data;\n    },\n    setRichText() {\n      this.$nextTick(() => {\n        this.editor = new E(`#editor`);\n        this.editor.highlight = hljs;\n        this.editor.config.uploadImgServer = this.$baseUrl + '/files/editor/upload';\n        this.editor.config.uploadFileName = 'file';\n        this.editor.config.uploadImgHeaders = {\n          token: this.user.token\n        };\n        this.editor.config.uploadImgParams = {\n          type: 'img'\n        };\n        this.editor.config.zIndex = 0;\n        this.editor.create(); // 创建\n      });\n    }\n  }\n};","map":{"version":3,"names":["E","hljs","name","data","form","user","JSON","parse","localStorage","getItem","rules","title","required","message","trigger","content","tagsArr","categoryList","editor","blogId","$route","query","mounted","$request","get","then","res","id","tags","setTimeout","txt","html","setRichText","methods","showConfirmDialog","$confirm","confirmButtonText","cancelButtonText","type","save","catch","$message","error","isContentEmpty","$refs","formRef","validate","valid","stringify","url","method","code","closeAll","success","$router","push","msg","handleCoverSuccess","cover","$nextTick","highlight","config","uploadImgServer","$baseUrl","uploadFileName","uploadImgHeaders","token","uploadImgParams","zIndex","create"],"sources":["src/views/front/NewBlog.vue"],"sourcesContent":["<template>\n  <div style=\"width: 50%; margin: 5px auto\">\n    <div class=\"card\" style=\"margin-bottom: 100px\">\n      <div style=\"font-weight: bold; font-size: 24px; margin-bottom: 50px\">发表新博客/编辑博客</div>\n      <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\" ref=\"formRef\">\n        <el-form-item label=\"标题\" prop=\"title\" >\n          <el-input v-model=\"form.title\" placeholder=\"标题\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"简介\" prop=\"descr\">\n          <el-input type=\"textarea\" v-model=\"form.descr\" placeholder=\"简介\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"封面\" prop=\"cover\">\n          <el-upload\n              :action=\"$baseUrl + '/files/upload'\"\n              :headers=\"{ token: user.token }\"\n              list-type=\"picture\"\n              :on-success=\"handleCoverSuccess\"\n          >\n            <el-button type=\"primary\">上传封面</el-button>\n          </el-upload>\n        </el-form-item>\n        <el-form-item label=\"分类\" prop=\"categoryId\">\n          <el-select v-model=\"form.categoryId\" style=\"width: 100%\">\n            <el-option v-for=\"item in categoryList\" :key=\"item.id\" :value=\"item.id\" :label=\"item.name\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"标签\" prop=\"tags\">\n          <el-select v-model=\"tagsArr\" multiple filterable allow-create default-first-option style=\"width: 100%\">\n            <el-option value=\"后端\"></el-option>\n            <el-option value=\"Java\"></el-option>\n            <el-option value=\"面试\"></el-option>\n            <el-option value=\"Vue\"></el-option>\n            <el-option value=\"前端\"></el-option>\n            <el-option value=\"大数据\"></el-option>\n            <el-option value=\"算法\"></el-option>\n            <el-option value=\"程序员\"></el-option>\n            <el-option value=\"小白\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"内容\" prop=\"content\" >\n          <div id=\"editor\"></div>\n        </el-form-item>\n      </el-form>\n      <!--      <div style=\"text-align: center\"><el-button type=\"primary\" size=\"medium\" style=\"width: 100px\" @click=\"save\">保 存</el-button></div>-->\n      <div style=\"text-align: center\"><el-button type=\"primary\" size=\"medium\" style=\"width: 100px\" @click=\"showConfirmDialog\">保 存</el-button></div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nimport E from \"wangeditor\";\nimport hljs from \"highlight.js\";\n\nexport default {\n  name: \"NewBlog\",\n  data() {\n    return {\n      form: {},\n      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),\n      rules: {\n        title: [\n          { required: true, message: '标题不能为空', trigger: 'blur' }\n        ],\n        content: [\n          { required: true, message: '内容不能为空', trigger: 'blur' }\n        ]\n      },\n      tagsArr: [],\n      categoryList: [],\n      editor: null,\n      blogId: this.$route.query.blogId\n    }\n  },\n  mounted() {\n    this.$request.get('/category/selectAll').then(res => {\n      this.categoryList = res.data || []\n    })\n\n    this.$request.get('/blog/selectById/' + this.blogId).then(res => {\n      this.form = res.data || {}\n      if (this.form.id) {\n        this.tagsArr = JSON.parse(this.form.tags || '[]')\n        setTimeout(() => {\n          this.editor.txt.html(this.form.content)\n        }, 0)\n      }\n    })\n\n    this.setRichText()\n  },\n  methods: {\n    showConfirmDialog() {\n      this.$confirm('确认保存吗?', '提示', {\n        confirmButtonText: '确认',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 用户点击确认按钮的逻辑\n        this.save(); // 执行保存操作\n\n      }).catch(() => {\n        // 用户点击取消按钮的逻辑\n        // 可以选择关闭弹窗或执行其他操作\n      });\n    },\n    save() {   // 保存按钮触发的逻辑  它会触发新增或者更新\n      this.form.content = this.editor.txt.html(); // 更新内容\n      if (!this.form.title) {\n        this.$message.error('标题不能为空');\n        return; // 返回，不执行保存操作\n      }\n      if (this.isContentEmpty(this.form.content)) {\n        this.$message.error('内容不能为空');\n        return; // 返回，不执行保存操作\n      }\n      this.$refs.formRef.validate((valid) => {\n        if (valid) {\n          this.form.tags = JSON.stringify(this.tagsArr)  // 把json数组转换成json字符串存到数据库\n          this.form.content = this.editor.txt.html()\n          this.$request({\n            url: this.form.id ? '/blog/update' : '/blog/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {  // 表示成功保存\n              // 关闭所有已存在的消息\n              this.$message.closeAll()\n              this.$message.success('保存成功')\n              this.$router.push('/front/person'); // 跳转到个人页面，这里假设使用了 Vue Router\n            } else {\n              // 表单验证失败，不执行保存操作，显示验证提示信息\n\n              this.$message.error(res.msg)  // 弹出错误的信息\n            }\n          })\n        }\n      })\n    },\n    handleCoverSuccess(res) {\n      this.form.cover = res.data\n    },\n    setRichText() {\n      this.$nextTick(() => {\n        this.editor = new E(`#editor`)\n        this.editor.highlight = hljs\n        this.editor.config.uploadImgServer = this.$baseUrl + '/files/editor/upload'\n        this.editor.config.uploadFileName = 'file'\n        this.editor.config.uploadImgHeaders = {\n          token: this.user.token\n        }\n        this.editor.config.uploadImgParams = {\n          type: 'img',\n        }\n        this.editor.config.zIndex = 0\n        this.editor.create()  // 创建\n      })\n    },\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n\n<!--<template>-->\n<!--  <div style=\"width: 50%; margin: 5px auto\">-->\n<!--    <div class=\"card\" style=\"margin-bottom: 100px\">-->\n<!--      <div style=\"font-weight: bold; font-size: 24px; margin-bottom: 50px\">编辑博客</div>-->\n<!--      <el-form :model=\"form\" label-width=\"100px\" style=\"padding-right: 50px\" :rules=\"rules\" ref=\"formRef\">-->\n<!--        <el-form-item label=\"标题\" prop=\"title\" >-->\n<!--          <el-input v-model=\"form.title\" placeholder=\"标题\"></el-input>-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"简介\" prop=\"descr\">-->\n<!--          <el-input type=\"textarea\" v-model=\"form.descr\" placeholder=\"简介\"></el-input>-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"封面\" prop=\"cover\">-->\n<!--          <el-upload-->\n<!--              :action=\"$baseUrl + '/files/upload'\"-->\n<!--              :headers=\"{ token: user.token }\"-->\n<!--              list-type=\"picture\"-->\n<!--              :on-success=\"handleCoverSuccess\"-->\n<!--          >-->\n<!--            <el-button type=\"primary\">上传封面</el-button>-->\n<!--          </el-upload>-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"分类\" prop=\"categoryId\">-->\n<!--          <el-select v-model=\"form.categoryId\" style=\"width: 100%\">-->\n<!--            <el-option v-for=\"item in categoryList\" :key=\"item.id\" :value=\"item.id\" :label=\"item.name\"></el-option>-->\n<!--          </el-select>-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"标签\" prop=\"tags\">-->\n<!--          <el-select v-model=\"tagsArr\" multiple filterable allow-create default-first-option style=\"width: 100%\">-->\n<!--            <el-option value=\"后端\"></el-option>-->\n<!--            <el-option value=\"Java\"></el-option>-->\n<!--            <el-option value=\"面试\"></el-option>-->\n<!--            <el-option value=\"Vue\"></el-option>-->\n<!--            <el-option value=\"前端\"></el-option>-->\n<!--            <el-option value=\"大数据\"></el-option>-->\n<!--            <el-option value=\"算法\"></el-option>-->\n<!--            <el-option value=\"程序员\"></el-option>-->\n<!--            <el-option value=\"小白\"></el-option>-->\n<!--          </el-select>-->\n<!--        </el-form-item>-->\n<!--        <el-form-item label=\"内容\" prop=\"content\">-->\n<!--          <div id=\"editor\"></div>-->\n<!--        </el-form-item>-->\n<!--      </el-form>-->\n<!--      <div style=\"text-align: center\">-->\n<!--        <el-button type=\"primary\" size=\"medium\" style=\"width: 100px\" @click=\"showConfirmDialog\">保 存</el-button>-->\n<!--      </div>-->\n<!--    </div>-->\n<!--  </div>-->\n<!--</template>-->\n\n<!--<script>-->\n<!--import E from \"wangeditor\";-->\n<!--import hljs from \"highlight.js\";-->\n\n<!--export default {-->\n<!--  name: \"NewBlog\",-->\n<!--  data() {-->\n<!--    return {-->\n<!--      form: {-->\n<!--        title: '',-->\n<!--        descr: '',-->\n<!--        cover: '',-->\n<!--        categoryId: '',-->\n<!--        tags: [],-->\n<!--        content: ''-->\n<!--      },-->\n<!--      user: JSON.parse(localStorage.getItem('xm-user') || '{}'),-->\n<!--      rules: {-->\n<!--        title: [-->\n<!--          { required: true, message: '标题不能为空', trigger: 'blur' }-->\n<!--        ],-->\n<!--        content: [-->\n<!--          { required: true, message: '内容不能为空', trigger: 'blur' }-->\n<!--        ]-->\n<!--      },-->\n<!--      tagsArr: [],-->\n<!--      categoryList: [],-->\n<!--      editor: null,-->\n<!--      blogId: this.$route.query.blogId-->\n<!--    }-->\n<!--  },-->\n<!--  mounted() {-->\n<!--    this.$request.get('/category/selectAll').then(res => {-->\n<!--      this.categoryList = res.data || []-->\n<!--    })-->\n\n<!--    this.$request.get('/blog/selectById/' + this.blogId).then(res => {-->\n<!--      this.form = res.data || {}-->\n<!--      if (this.form.id) {-->\n<!--        this.tagsArr = JSON.parse(this.form.tags || '[]')-->\n<!--        setTimeout(() => {-->\n<!--          this.editor.txt.html(this.form.content)-->\n<!--        }, 0)-->\n<!--      }-->\n<!--    })-->\n\n<!--    this.setRichText()-->\n<!--  },-->\n<!--  methods: {-->\n<!--    showConfirmDialog() {-->\n<!--      this.$confirm('确认保存吗?', '提示', {-->\n<!--        confirmButtonText: '确认',-->\n<!--        cancelButtonText: '取消',-->\n<!--        type: 'warning'-->\n<!--      }).then(() => {-->\n<!--        // 用户点击确认按钮的逻辑-->\n<!--        this.save(); // 执行保存操作-->\n<!--      }).catch(() => {-->\n<!--        // 用户点击取消按钮的逻辑-->\n<!--        // 可以选择关闭弹窗或执行其他操作-->\n<!--      });-->\n<!--    },-->\n<!--    save() {-->\n<!--      this.form.content = this.editor.txt.html(); // 更新内容-->\n<!--      if (!this.form.title) {-->\n<!--        this.$message.error('标题不能为空');-->\n<!--        return; // 返回，不执行保存操作-->\n<!--      }-->\n<!--      if (this.isContentEmpty(this.form.content)) {-->\n<!--        this.$message.error('内容不能为空');-->\n<!--        return; // 返回，不执行保存操作-->\n<!--      }-->\n\n<!--      this.$refs.formRef.validate((valid) => {-->\n<!--        if (valid) {-->\n<!--          this.form.tags = JSON.stringify(this.tagsArr)  // 把json数组转换成json字符串存到数据库-->\n<!--          this.$request({-->\n<!--            url: this.form.id ? '/blog/update' : '/blog/add',-->\n<!--            method: this.form.id ? 'PUT' : 'POST',-->\n<!--            data: this.form-->\n<!--          }).then(res => {-->\n<!--            if (res.code === '200') {  // 表示成功保存-->\n<!--              // 关闭所有已存在的消息-->\n<!--              this.$message.closeAll()-->\n<!--              this.$message.success('保存成功')-->\n<!--              this.$router.push('/front/person'); // 跳转到个人页面，这里假设使用了 Vue Router-->\n<!--            } else {-->\n<!--              this.$message.error(res.msg)  // 弹出错误的信息-->\n<!--            }-->\n<!--          })-->\n<!--        }-->\n<!--      });-->\n<!--    },-->\n<!--    isContentEmpty(content) {-->\n<!--      const textContwent = content.replace(/<[^>]*>/g, '').trim(); // 移除HTML标签并修剪空白-->\n<!--      return textContent === '';-->\n<!--    },-->\n<!--    handleCoverSuccess(res) {-->\n<!--      this.form.cover = res.data-->\n<!--    },-->\n<!--    setRichText() {-->\n<!--      this.$nextTick(() => {-->\n<!--        this.editor = new E(`#editor`)-->\n<!--        this.editor.highlight = hljs-->\n<!--        this.editor.config.uploadImgServer = this.$baseUrl + '/files/editor/upload'-->\n<!--        this.editor.config.uploadFileName = 'file'-->\n<!--        this.editor.config.uploadImgHeaders = {-->\n<!--          token: this.user.token-->\n<!--        }-->\n<!--        this.editor.config.uploadImgParams = {-->\n<!--          type: 'img',-->\n<!--        }-->\n<!--        this.editor.config.zIndex = 0-->\n<!--        this.editor.create()  // 创建-->\n<!--      })-->\n<!--    },-->\n<!--  }-->\n<!--}-->\n<!--</script>-->\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}